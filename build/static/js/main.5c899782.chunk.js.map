{"version":3,"sources":["pages/home.tsx","contexts/locale.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["header","background","minHeight","marginBottom","anchor","marginTop","width","Home","className","style","paddingTop","href","src","id","action","method","type","name","value","React","Component","LocaleContext","createContext","App","useState","locale","setLocale","messages","Provider","atEnter","opacity","atLeave","atActive","path","exact","component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.5c899782.chunk.js","sourcesContent":["import React from 'react';\r\nimport {mailContact} from \"../config\";\r\nimport AnchorLink from 'react-anchor-link-smooth-scroll';\r\n\r\nconst header = {\r\n  background: '#5FC8D7',\r\n  minHeight: 300,\r\n  marginBottom: 20,\r\n};\r\n\r\nconst anchor = {\r\n  marginTop: 30,\r\n  width: 100,\r\n};\r\n\r\nexport class Home extends React.Component<any, any> {\r\n\r\n  public render() {\r\n    return <div className=\"mb-5\">\r\n      <div style={header}>\r\n        <h1 className=\"text-white text-center\" style={{paddingTop: 120}}>Dentaltourismus</h1>\r\n        <AnchorLink href=\"#anfrage\" className=\"btn bg-white d-block mx-auto\" style={anchor}>Anfrage</AnchorLink>\r\n      </div>\r\n      <div className=\"container mb-5\">\r\n        <div className=\"row mb-5\">\r\n          <div className=\"col-12\">\r\n            <h2 className=\"text-center my-5\">Über mich</h2>\r\n            <p>Ich heiße Antonio Milivoevski und bin als Zahnarzt in einer deutschen Zahnarztpraxis tätig.<br/>\r\n              Mein Studium der Zahnmedizin habe ich 2013 in Belgrad, Serbien abgeschlossen.<br/>\r\n              Seit 2017 bin ich als Zahnarzt in Deutschland angestellt. Tägliche Beschäftigung mit Patienten in\r\n              Deutschland hat mir die Idee über dental Tourismus gebracht. Jeder Mensch verdient eine vernünftige\r\n              Zahnbehandlung. Leider oft die Preise in Deutschland erlauben es nicht.\r\n              Als jemand der in Serbien Zahnmedizin studiert hat und auch dort 2 Jahre als Zahnarzt gearbeitet hat\r\n              dürfte ich mir erlauben die Qualität der Zahnbehandlung in Serbien mit der deutschen zu vergleichen.\r\n              Niedrigere kosten für zahnärztliche Behandlung bedeuten nicht immer weniger Qualität. Das kann ich auch in\r\n              diesem Fall behaupten. In manchen Zahnarztpraxen arbeiten die Professoren von den Universitäten und in\r\n              fast allen sind Fachärzte für Prothetik oder Kieferchirurgie tätig.\r\n              Viele fragen sich warum ist im Ausland bzw. Serbien Zahnersatz drastisch billiger als in Deutschland? Es\r\n              ist einfach zu erklären. Lebensstandard, Steuer, Zahntechnischekosten sind niedriger, die Qualität, die\r\n              Verantwortung, Fähigkeit und Fachwissen im Gegenteil nicht.\r\n            </p>\r\n          </div>\r\n        </div>\r\n        <div className=\"row mb-5\">\r\n          <div className=\"col-12 d-flex justify-content-between\">\r\n            <img src=\"/images/NEX_3315.jpg\" width=\"23%\"/>\r\n            <img src=\"/images/NEX_5167.jpg\" width=\"23%\"/>\r\n            <img src=\"/images/NEX_5189.jpg\" width=\"23%\"/>\r\n            <img src=\"/images/NEX_5212.jpg\" width=\"23%\"/>\r\n          </div>\r\n        </div>\r\n        <div className=\"row\">\r\n          <div className=\"col-lg-12 mb-5\">\r\n            <h2 className=\"text-center my-5\" id=\"anfrage\">Anfrage</h2>\r\n            <form action={\"https://formspree.io/\" + mailContact} method=\"POST\">\r\n              <div className=\"form-group\">\r\n                <label>Vorname ( Pflichtfeld)</label>\r\n                <input type=\"text\" className=\"form-control\" name=\"first_name\"/>\r\n              </div>\r\n\r\n              <div className=\"form-group\">\r\n                <label>Name ( Pflichtfeld)</label>\r\n                <input type=\"text\" className=\"form-control\" name=\"last_name\"/>\r\n              </div>\r\n\r\n              <div className=\"form-group\">\r\n                <label>Geburtsdatum</label>\r\n                <input type=\"date\" className=\"form-control\" name=\"date_of_birth\"/>\r\n              </div>\r\n\r\n              <div className=\"form-group\">\r\n                <label>E-Mail Adresse ( Pflichtfeld)</label>\r\n                <input type=\"email\" className=\"form-control\" name=\"email\"/>\r\n              </div>\r\n\r\n              <div className=\"form-group\">\r\n                <label>Handynummer (optional)</label>\r\n                <input type=\"text\" className=\"form-control\" name=\"phone\"/>\r\n              </div>\r\n\r\n              <div className=\"form-group\">\r\n                <label>Beschreiben Sie Ihr Zahnproblem (Pflichtfeld)</label>\r\n                <textarea className=\"form-control\" name=\"description\"/>\r\n              </div>\r\n\r\n              <input type=\"submit\" value=\"Submit\" className=\"btn btn-primary text-white d-block mx-auto\"\r\n                     style={{width: 100}}/>\r\n\r\n              {/*Ihr Rö Bild ( Panorama Bild-OPG) (Pflichtfeld)*/}\r\n              {/*Fotos von Ihren Zähnen (optional)*/}\r\n              {/*Vorhandene Therapieplan ( falls vorhanden)*/}\r\n              {/*Gewünschte Datum Ihres Therapiebeginns*/}\r\n              {/*Möchten Sie einen Kostenvoranschlag für Ihre Aufenthalt im Serbien während der Behandlung ( Falls ja, wie viel Personen sollen wir buchen, liegen besondere wünsche für das Hotel, bitte beschreiben )*/}\r\n\r\n            </form>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>;\r\n  }\r\n}\r\n","import React from 'react'\r\n\r\nconst LocaleContext = React.createContext({});\r\n\r\nexport default LocaleContext\r\n","import React from 'react';\r\nimport 'animate.css/animate.min.css';\r\n\r\nimport {HashRouter as Router, Route} from 'react-router-dom';\r\nimport {AnimatedSwitch} from 'react-router-transition';\r\nimport {I18n} from 'react-polyglot';\r\nimport {Header} from './components/header';\r\nimport {Footer} from './components/footer';\r\nimport {Home} from './pages/home';\r\nimport LocaleContext from './contexts/locale'\r\n\r\nconst App: React.FC = () => {\r\n  const [locale, setLocale] = React.useState('en');\r\n  // In a real app, you should consider preloading default country\r\n  // or load it from the server.\r\n  const [messages, setMessages] = React.useState({});\r\n\r\n  // React.useEffect(\r\n  //   () => {\r\n  //     async function fetchData() {\r\n  //       const response = await fetch(`/translations/${locale}.json`);\r\n  //       const data = await response.json();\r\n  //       // In a real app, you should consider caching the results in an object.\r\n  //       // To prevent requests for same locale again.\r\n  //       return data;\r\n  //     }\r\n  //\r\n  //     fetchData()\r\n  //   },\r\n  //   [locale]\r\n  // );\r\n\r\n  return (\r\n    <div className='flex-wrapper'>\r\n      <LocaleContext.Provider value={{locale, setLocale}}>\r\n        <I18n locale={locale} messages={messages}>\r\n          <Router>\r\n            {/*<Header/>*/}\r\n            <AnimatedSwitch\r\n              atEnter={{opacity: 0}}\r\n              atLeave={{opacity: 0}}\r\n              atActive={{opacity: 1}}\r\n            >\r\n              <Route path='/' exact component={Home}/>\r\n            </AnimatedSwitch>\r\n            {/*<Footer/>*/}\r\n          </Router>\r\n        </I18n>\r\n      </LocaleContext.Provider>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './scss/main.scss';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.register();\r\n"],"sourceRoot":""}